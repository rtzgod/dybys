#!/bin/bash

echo "🎵 Setting up dybys - Music Tokenization Platform"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if running on Windows (Git Bash/WSL)
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    print_info "Windows detected - make sure Docker Desktop is installed and running"
fi

# Check if running on macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    print_info "macOS detected - make sure Docker Desktop is installed and running"
fi

# Check if running on Linux
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    print_info "Linux detected - checking file descriptor limits..."
    
    # Check current ulimits
    current_ulimit=$(ulimit -n)
    if [ "$current_ulimit" -lt 1000000 ]; then
        print_warning "Current file descriptor limit is $current_ulimit"
        print_info "Docker will handle this automatically for the Solana validator"
    fi
fi

# 1. Check Docker and Docker Compose
echo ""
echo "🔍 Checking prerequisites..."

if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed"
    echo "Please install Docker Desktop from: https://www.docker.com/products/docker-desktop"
    echo "Then run this script again."
    exit 1
fi

if ! docker info > /dev/null 2>&1; then
    print_error "Docker is not running"
    echo "Please start Docker Desktop and run this script again."
    exit 1
fi

print_status "Docker is installed and running"

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose is not installed"
    echo "Please install Docker Compose or use a newer version of Docker that includes Compose"
    exit 1
fi

print_status "Docker Compose is available"

# 2. Check if ports are available
echo ""
echo "🔍 Checking port availability..."

check_port() {
    local port=$1
    local service=$2
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "Port $port is already in use (needed for $service)"
        echo "Please stop the service using port $port or change the port in docker-compose.yml"
        return 1
    else
        print_status "Port $port is available ($service)"
        return 0
    fi
}

ports_ok=true
check_port 3000 "Frontend" || ports_ok=false
check_port 5000 "Backend API" || ports_ok=false
check_port 5432 "PostgreSQL" || ports_ok=false
check_port 8899 "Solana RPC" || ports_ok=false

if [ "$ports_ok" = false ]; then
    echo ""
    print_error "Some ports are in use. Please resolve port conflicts before continuing."
    exit 1
fi

# 3. Make scripts executable
echo ""
echo "🔧 Setting up executable permissions..."

chmod +x test-docker.sh 2>/dev/null && print_status "test-docker.sh is now executable" || print_warning "test-docker.sh not found"

# 4. Clean up any existing containers
echo ""
echo "🧹 Cleaning up any existing containers..."
docker-compose down -v 2>/dev/null
print_status "Cleaned up existing containers"

# 5. Create .env files for Docker (backup existing ones)
echo ""
echo "📝 Setting up environment files..."

if [ -f "backend/.env" ]; then
    cp backend/.env backend/.env.backup
    print_info "Backed up existing backend/.env to backend/.env.backup"
fi

if [ -f "frontend/.env.local" ]; then
    cp frontend/.env.local frontend/.env.local.backup
    print_info "Backed up existing frontend/.env.local to frontend/.env.local.backup"
fi

# Create Docker-compatible backend .env
cat > backend/.env << EOF
# Docker Environment - Auto-generated by setup.sh
DATABASE_URL=postgresql://dybys:dybys123@postgres:5432/dybys
JWT_SECRET=your-super-secret-jwt-key-change-in-production
PORT=5000
NODE_ENV=production
EOF

print_status "Created Docker-compatible backend/.env"

# Create Docker-compatible frontend .env.local  
cat > frontend/.env.local << EOF
# Docker Environment - Auto-generated by setup.sh
NEXT_PUBLIC_SOLANA_RPC=http://localhost:8899
NEXT_PUBLIC_API_URL=http://localhost:5000
NEXT_PUBLIC_PROGRAM_ID=FPZCujxx2DPXL2rURe2yqvTKMwzJWcVmaDmq4MRQAhQ
NODE_ENV=production
EOF

print_status "Created Docker-compatible frontend/.env.local"

# 6. Build and start services
echo ""
echo "🚀 Building and starting dybys platform..."
echo "This may take 2-3 minutes for the initial build..."

if docker-compose up -d --build; then
    print_status "All services are starting up!"
else
    print_error "Failed to start services"
    echo "Check the logs with: docker-compose logs"
    exit 1
fi

# 7. Wait for services to be ready
echo ""
echo "⏳ Waiting for all services to be ready..."

# Wait up to 5 minutes for services (Solana validator can take longer)
timeout=300
elapsed=0
interval=15

while [ $elapsed -lt $timeout ]; do
    # Check each service individually
    frontend_ready=$(curl -f http://localhost:3000 > /dev/null 2>&1 && echo "true" || echo "false")
    backend_ready=$(curl -f http://localhost:5000/health > /dev/null 2>&1 && echo "true" || echo "false")
    solana_ready=$(curl -f http://localhost:8899 -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","id":1,"method":"getVersion"}' > /dev/null 2>&1 && echo "true" || echo "false")
    
    echo "   Frontend: $frontend_ready | Backend: $backend_ready | Solana: $solana_ready (${elapsed}s elapsed)"
    
    if [ "$frontend_ready" = "true" ] && [ "$backend_ready" = "true" ] && [ "$solana_ready" = "true" ]; then
        break
    fi
    
    # Check for Solana validator errors
    if [ $elapsed -gt 60 ]; then
        solana_status=$(docker-compose logs solana-validator 2>/dev/null | tail -5)
        if echo "$solana_status" | grep -i "panic\|error\|failed" > /dev/null; then
            print_warning "Solana validator may be having issues. Checking logs..."
            docker-compose logs solana-validator | tail -10
        fi
    fi
    
    sleep $interval
    elapsed=$((elapsed + interval))
done

# 8. Test all endpoints
echo ""
echo "🧪 Testing all services..."

if [ -f "test-docker.sh" ]; then
    if ./test-docker.sh; then
        print_status "All tests passed!"
    else
        print_warning "Some tests failed, but services might still be starting"
    fi
else
    # Manual tests
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        print_status "Frontend is responding"
    else
        print_error "Frontend is not responding"
    fi
    
    if curl -f http://localhost:5000/health > /dev/null 2>&1; then
        print_status "Backend is responding"
    else
        print_error "Backend is not responding"
    fi
fi

# 9. Success message
echo ""
echo "🎉 dybys Platform Setup Complete!"
echo "================================="
echo ""
echo "🌐 Access your platform:"
echo "   Frontend:  http://localhost:3000"
echo "   Backend:   http://localhost:5000"
echo "   Database:  localhost:5432"
echo "   Solana:    http://localhost:8899"
echo ""
echo "💡 Demo Features:"
echo "   - Connect any wallet → Get 100 SOL instantly"
echo "   - Real-time balance display in navigation"
echo "   - Complete tokenization workflow"
echo "   - Investment tracking and portfolio"
echo ""
echo "🛠️  Useful commands:"
echo "   View logs:     docker-compose logs -f"
echo "   Stop services: docker-compose down"
echo "   Restart:       docker-compose restart"
echo ""
echo "📖 Need help? Check the README.md or run:"
echo "   docker-compose logs [service-name]"
echo ""
print_status "Setup completed successfully! 🎵"